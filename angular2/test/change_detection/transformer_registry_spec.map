{"version":3,"sources":["transformer_registry_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,OAAK;AAAG,WAAS;AAAG,UAAQ,CAAC,KAAO,oBAAkB,CAAC;AAElG,KAAO,EAAC,YAAW,CAAC,KAAO,oDAAkD,CAAC;AAC9E,KAAO,EAAC,IAAG,CAAC,KAAO,2CAAyC,CAAC;AAE7D,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,eAAc,CAAG,EAAC,AAAD,IAAM;AAC9B,AAAI,MAAA,CAAA,SAAQ,EAAI,IAAI,KAAG,AAAC,EAAC,CAAC;AAC1B,AAAI,MAAA,CAAA,UAAS,EAAI,IAAI,KAAG,AAAC,EAAC,CAAC;AAE3B,KAAC,AAAC,CAAC,uDAAsD,CAAG,EAAC,AAAD,IAAM;AAChE,AAAI,QAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC,CACvB,MAAK,CAAG,EACN;AAAC,mBAAS,CAAG,EAAC,GAAE,IAAM,MAAI;AAAG,eAAK,CAAG,EAAC,AAAD,IAAM,UAAQ;AAAA,QAAC,CACpD;AAAC,mBAAS,CAAG,EAAC,GAAE,IAAM,KAAG;AAAG,eAAK,CAAG,EAAC,AAAD,IAAM,WAAS;AAAA,QAAC,CACtD,CACF,CAAC,CAAC;AAEF,WAAK,AAAC,CAAC,CAAA,IAAI,AAAC,CAAC,MAAK,CAAG,cAAY,CAAC,CAAC,KAAK,AAAC,CAAC,UAAS,CAAC,CAAC;IACvD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,oCAAmC,CAAG,EAAC,AAAD,IAAM;AAC7C,AAAI,QAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC,EAAC,CAAC,CAAC;AAC5B,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,CAAA,IAAI,AAAC,CAAC,SAAQ,CAAG,cAAY,CAAC,CAAC,aAAa,AAAC,CACxD,4DAA2D,CAC7D,CAAC;IACH,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,oCAAmC,CAAG,EAAC,AAAD,IAAM;AAC7C,AAAI,QAAA,CAAA,CAAA,EAAI,IAAI,aAAW,AAAC,CAAC,CACvB,MAAK,CAAI,GAAC,CACZ,CAAC,CAAC;AAEF,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,CAAA,IAAI,AAAC,CAAC,MAAK,CAAG,cAAY,CAAC,CAAC,aAAa,AAAC,CACrD,yDAAwD,CAC1D,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"/Users/abdulsat/Projects/angular/modules/angular2/test/change_detection/transformer_registry_spec.js","sourceRoot":"/Users/abdulsat/Projects/angular/modules/angular2/test/change_detection/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport {PipeRegistry} from 'angular2/src/change_detection/pipes/pipe_registry';\nimport {Pipe} from 'angular2/src/change_detection/pipes/pipe';\n\nexport function main() {\n  describe(\"pipe registry\", () => {\n    var firstPipe = new Pipe();\n    var secondPipe = new Pipe();\n\n    it(\"should return the first pipe supporting the data type\", () => {\n      var r = new PipeRegistry({\n        \"type\": [\n          {\"supports\": (obj) => false, \"pipe\": () => firstPipe},\n          {\"supports\": (obj) => true, \"pipe\": () => secondPipe}\n        ]\n      });\n\n      expect(r.get(\"type\", \"some object\")).toBe(secondPipe);\n    });\n\n    it(\"should throw when no matching type\", () => {\n      var r = new PipeRegistry({});\n      expect(() => r.get(\"unknown\", \"some object\")).toThrowError(\n        `Cannot find a pipe for type 'unknown' object 'some object'`\n      );\n    });\n\n    it(\"should throw when no matching pipe\", () => {\n      var r = new PipeRegistry({\n        \"type\" : []\n      });\n\n      expect(() => r.get(\"type\", \"some object\")).toThrowError(\n        `Cannot find a pipe for type 'type' object 'some object'`\n      );\n    });\n  });\n}\n"]}